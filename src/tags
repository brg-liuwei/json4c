!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLINK	jc_main.c	15;"	d	file:
BLUEBG	jc_main.c	13;"	d	file:
HIGHLIGHT	jc_main.c	16;"	d	file:
JC_ARRAY	jc_type.c	/^    JC_ARRAY,$/;"	e	enum:__jc_type_t	file:
JC_BOOL	jc_type.c	/^    JC_BOOL = 0,$/;"	e	enum:__jc_type_t	file:
JC_FLOAT	jc_type.c	/^    JC_FLOAT,$/;"	e	enum:__jc_type_t	file:
JC_INCSTEP	jc_type.c	9;"	d	file:
JC_INT	jc_type.c	/^    JC_INT,$/;"	e	enum:__jc_type_t	file:
JC_JSON	jc_type.c	/^    JC_JSON,$/;"	e	enum:__jc_type_t	file:
JC_MEMALIGN	jc_alloc.h	17;"	d
JC_MEMSIZE	jc_type.c	8;"	d	file:
JC_NULL	jc_type.c	/^    JC_NULL$/;"	e	enum:__jc_type_t	file:
JC_OBJ_COLON	jc_type.c	/^    JC_OBJ_COLON,$/;"	e	enum:__anon3	file:
JC_OBJ_KEY	jc_type.c	/^    JC_OBJ_KEY,$/;"	e	enum:__anon3	file:
JC_OBJ_LBRACE	jc_type.c	/^    JC_OBJ_LBRACE,$/;"	e	enum:__anon3	file:
JC_OBJ_START	jc_type.c	/^    JC_OBJ_START = 0,$/;"	e	enum:__anon3	file:
JC_OBJ_VAL	jc_type.c	/^    JC_OBJ_VAL,$/;"	e	enum:__anon3	file:
JC_POOLMINSIZE	jc_alloc.c	12;"	d	file:
JC_STR	jc_type.c	/^    JC_STR,$/;"	e	enum:__jc_type_t	file:
JC_STR_CHR	jc_type.c	/^    JC_STR_CHR,$/;"	e	enum:__anon2	file:
JC_STR_END_QUA	jc_type.c	/^    JC_STR_END_QUA,$/;"	e	enum:__anon2	file:
JC_STR_START	jc_type.c	/^    JC_STR_START = 0,$/;"	e	enum:__anon2	file:
JC_STR_START_QUA	jc_type.c	/^    JC_STR_START_QUA,$/;"	e	enum:__anon2	file:
JC_STR_TRANS	jc_type.c	/^    JC_STR_TRANS,        \/* reverse solidus *\/$/;"	e	enum:__anon2	file:
NONE	jc_main.c	17;"	d	file:
RED	jc_main.c	11;"	d	file:
WHITEBG	jc_main.c	14;"	d	file:
YELLOW	jc_main.c	12;"	d	file:
__JC_ALLOC_H__	jc_alloc.h	2;"	d
__JC_TYPE_H__	jc_type.h	2;"	d
__jc_json_array_size	jc_type.c	/^static size_t __jc_json_array_size(jc_array_t *arr)$/;"	f	file:
__jc_json_parse_array	jc_type.c	/^static int __jc_json_parse_array(jc_json_t *js, const char *p, jc_val_t **val) { return -1; }$/;"	f	file:
__jc_json_parse_bool	jc_type.c	/^static int __jc_json_parse_bool(jc_json_t *js, const char *p, jc_val_t **val) { return -1; }$/;"	f	file:
__jc_json_parse_key	jc_type.c	/^static int __jc_json_parse_key(jc_json_t *js, const char *p, jc_key_t **key)$/;"	f	file:
__jc_json_parse_null	jc_type.c	/^static int __jc_json_parse_null(jc_json_t *js, const char *p, jc_val_t **val) { return -1; }$/;"	f	file:
__jc_json_parse_number	jc_type.c	/^static int __jc_json_parse_number(jc_json_t *js, const char *p, jc_val_t **val) { return -1; }$/;"	f	file:
__jc_json_parse_str	jc_type.c	/^static int __jc_json_parse_str(jc_json_t *js, const char *p, jc_val_t **val)$/;"	f	file:
__jc_json_parse_sub_json	jc_type.c	/^static int __jc_json_parse_sub_json(jc_json_t *js, const char *p, jc_val_t **val) { return -1; }$/;"	f	file:
__jc_json_parse_val	jc_type.c	/^static int __jc_json_parse_val(jc_json_t *js, const char *p, jc_val_t **val)$/;"	f	file:
__jc_json_size	jc_type.c	/^static size_t __jc_json_size(jc_json_t *js)$/;"	f	file:
__jc_json_str	jc_type.c	/^static int __jc_json_str(jc_json_t *js, char *p)$/;"	f	file:
__jc_json_val_size	jc_type.c	/^static size_t __jc_json_val_size(jc_val_t *val)$/;"	f	file:
__jc_json_value	jc_type.c	/^static int __jc_json_value(jc_val_t *val, char *p)$/;"	f	file:
__jc_type_t	jc_type.c	/^typedef enum __jc_type_t {$/;"	g	file:
a	jc_type.c	/^        jc_array_t   *a;$/;"	m	union:jc_val_s::__anon1	file:
b	jc_type.c	/^        jc_bool_t     b;$/;"	m	union:jc_val_s::__anon1	file:
body	jc_type.c	/^    char     body[];   \/* str *\/$/;"	m	struct:jc_str_s	file:
cln	jc_alloc.c	/^    jc_pool_cln_t       cln;$/;"	m	struct:jc_pool_s	file:
current	jc_alloc.c	/^    jc_pool_t          *current;$/;"	m	struct:jc_pool_s	file:
data	jc_alloc.c	/^    jc_pool_data_t      data;$/;"	m	struct:jc_pool_s	file:
data	jc_type.c	/^    } data;$/;"	m	struct:jc_val_s	typeref:union:jc_val_s::__anon1	file:
end	jc_alloc.c	/^    char        *end;       \/* end of current pool *\/$/;"	m	struct:jc_pool_data_s	file:
f	jc_type.c	/^        jc_float_t    f;$/;"	m	union:jc_val_s::__anon1	file:
fail	jc_alloc.c	/^    short        fail;$/;"	m	struct:jc_pool_data_s	file:
free	jc_type.c	/^    size_t       free;     \/* free size of keys and values *\/$/;"	m	struct:jc_json_s	file:
free	jc_type.c	/^    size_t      free;     \/* free size of array *\/$/;"	m	struct:jc_array_s	file:
free	jc_type.c	/^    size_t   free;     \/* free space *\/$/;"	m	struct:jc_str_s	file:
i	jc_type.c	/^        jc_int_t      i;$/;"	m	union:jc_val_s::__anon1	file:
j	jc_type.c	/^        jc_json_t    *j;$/;"	m	union:jc_val_s::__anon1	file:
jc_align	jc_alloc.h	18;"	d
jc_array_append	jc_type.c	/^static int jc_array_append(jc_array_t *arr, jc_pool_t *pool, jc_val_t *val)$/;"	f	file:
jc_array_create	jc_type.c	/^static jc_array_t *jc_array_create(jc_pool_t *pool)$/;"	f	file:
jc_array_incr	jc_type.c	/^static int jc_array_incr(jc_array_t *arr, jc_pool_t *pool)$/;"	f	file:
jc_array_s	jc_type.c	/^struct jc_array_s {$/;"	s	file:
jc_array_t	jc_type.c	/^typedef struct jc_array_s    jc_array_t;$/;"	t	typeref:struct:jc_array_s	file:
jc_bool_t	jc_type.c	/^typedef short                jc_bool_t;$/;"	t	file:
jc_bsearch_key	jc_type.c	/^static int jc_bsearch_key(jc_json_t *js, jc_key_t *key)$/;"	f	file:
jc_float_t	jc_type.c	/^typedef double               jc_float_t;$/;"	t	file:
jc_init	jc_alloc.c	/^static void jc_init()$/;"	f	file:
jc_initialized	jc_alloc.c	/^static int jc_initialized = 0;$/;"	v	file:
jc_int_t	jc_type.c	/^typedef int64_t              jc_int_t;$/;"	t	file:
jc_json_add_array	jc_type.c	/^int jc_json_add_array(jc_json_t *js, const char *key)$/;"	f
jc_json_add_bool	jc_type.c	/^int jc_json_add_bool(jc_json_t *js, const char *key, int bl)$/;"	f
jc_json_add_float	jc_type.c	/^int jc_json_add_float(jc_json_t *js, const char *key, double f)$/;"	f
jc_json_add_int	jc_type.c	/^int jc_json_add_int(jc_json_t *js, const char *key, int64_t i)$/;"	f
jc_json_add_json	jc_type.c	/^int jc_json_add_json(jc_json_t *js, const char *key, jc_json_t *sub_js)$/;"	f
jc_json_add_kv	jc_type.c	/^static int jc_json_add_kv(jc_json_t *js, jc_key_t *key, jc_val_t *val)$/;"	f	file:
jc_json_add_null	jc_type.c	/^int jc_json_add_null(jc_json_t *js, const char *key)$/;"	f
jc_json_add_str	jc_type.c	/^int jc_json_add_str(jc_json_t *js, const char *key, const char *val)$/;"	f
jc_json_create	jc_type.c	/^jc_json_t *jc_json_create()$/;"	f
jc_json_destroy	jc_type.c	/^void jc_json_destroy(jc_json_t *js)$/;"	f
jc_json_parse	jc_type.c	/^jc_json_t *jc_json_parse(const char *p)$/;"	f
jc_json_s	jc_type.c	/^struct jc_json_s {$/;"	s	file:
jc_json_str	jc_type.c	/^const char *jc_json_str(jc_json_t *js)$/;"	f
jc_json_t	jc_type.h	/^typedef struct jc_json_s     jc_json_t;$/;"	t	typeref:struct:jc_json_s
jc_key	jc_type.c	/^static jc_key_t *jc_key(jc_pool_t *pool, const char *key)$/;"	f	file:
jc_key_t	jc_type.c	/^typedef struct jc_str_s      jc_key_t;$/;"	t	typeref:struct:jc_str_s	file:
jc_kv_incr	jc_type.c	/^static int jc_kv_incr(jc_json_t *js)$/;"	f	file:
jc_kv_insert	jc_type.c	/^static void jc_kv_insert(jc_json_t *js, jc_key_t *key, jc_val_t *val)$/;"	f	file:
jc_memalign	jc_alloc.c	/^static void *jc_memalign(size_t boundary, size_t size)$/;"	f	file:
jc_memalign	jc_alloc.c	39;"	d	file:
jc_obj_state_t	jc_type.c	/^} jc_obj_state_t;$/;"	t	typeref:enum:__anon3	file:
jc_pagesize	jc_alloc.c	/^static size_t jc_pagesize;$/;"	v	file:
jc_pool_alloc	jc_alloc.c	/^void *jc_pool_alloc(jc_pool_t *pool, size_t size)$/;"	f
jc_pool_alloc_block	jc_alloc.c	/^static void *jc_pool_alloc_block(jc_pool_t *pool, size_t size)$/;"	f	file:
jc_pool_alloc_large	jc_alloc.c	/^static void *jc_pool_alloc_large(jc_pool_t *p, size_t size)$/;"	f	file:
jc_pool_cln_t	jc_alloc.h	/^typedef void (*jc_pool_cln_t)(void *);$/;"	t
jc_pool_create	jc_alloc.c	/^jc_pool_t *jc_pool_create(size_t size)$/;"	f
jc_pool_data_s	jc_alloc.c	/^struct jc_pool_data_s {$/;"	s	file:
jc_pool_data_t	jc_alloc.h	/^typedef struct jc_pool_data_s  jc_pool_data_t;$/;"	t	typeref:struct:jc_pool_data_s
jc_pool_destroy	jc_alloc.c	/^void jc_pool_destroy(jc_pool_t *p)$/;"	f
jc_pool_large_s	jc_alloc.c	/^struct jc_pool_large_s {$/;"	s	file:
jc_pool_large_t	jc_alloc.h	/^typedef struct jc_pool_large_s jc_pool_large_t;$/;"	t	typeref:struct:jc_pool_large_s
jc_pool_s	jc_alloc.c	/^struct jc_pool_s {$/;"	s	file:
jc_pool_t	jc_alloc.h	/^typedef struct jc_pool_s       jc_pool_t;$/;"	t	typeref:struct:jc_pool_s
jc_str_s	jc_type.c	/^struct jc_str_s {$/;"	s	file:
jc_str_state_t	jc_type.c	/^} jc_str_state_t;$/;"	t	typeref:enum:__anon2	file:
jc_str_t	jc_type.c	/^typedef struct jc_str_s      jc_str_t;$/;"	t	typeref:struct:jc_str_s	file:
jc_trans_array	jc_type.c	/^static int jc_trans_array(jc_json_t *js, int idx)$/;"	f	file:
jc_type_t	jc_type.c	/^} jc_type_t;$/;"	t	typeref:enum:__jc_type_t	file:
jc_val_s	jc_type.c	/^struct jc_val_s {$/;"	s	file:
jc_val_t	jc_type.c	/^typedef struct jc_val_s      jc_val_t;$/;"	t	typeref:struct:jc_val_s	file:
keys	jc_type.c	/^    jc_key_t   **keys;     \/* keys of json *\/$/;"	m	struct:jc_json_s	file:
large	jc_alloc.c	/^    jc_pool_large_t    *large;$/;"	m	struct:jc_pool_s	file:
last	jc_alloc.c	/^    char        *last;      \/* last position of alloced data *\/$/;"	m	struct:jc_pool_data_s	file:
main	jc_main.c	/^int main(int argc, char *argv[])$/;"	f
max	jc_alloc.c	/^    size_t              max;     \/* max data can alloc from pool *\/$/;"	m	struct:jc_pool_s	file:
next	jc_alloc.c	/^    jc_pool_large_t   *next;$/;"	m	struct:jc_pool_large_s	file:
next	jc_alloc.c	/^    jc_pool_t   *next;$/;"	m	struct:jc_pool_data_s	file:
pool	jc_type.c	/^    jc_pool_t   *pool;     \/* mem pool of json *\/$/;"	m	struct:jc_json_s	file:
ptr	jc_alloc.c	/^    void              *ptr;$/;"	m	struct:jc_pool_large_s	file:
s	jc_type.c	/^        jc_str_t     *s;$/;"	m	union:jc_val_s::__anon1	file:
size	jc_alloc.c	/^    size_t             size;$/;"	m	struct:jc_pool_large_s	file:
size	jc_type.c	/^    size_t       size;     \/* size of keys and values *\/$/;"	m	struct:jc_json_s	file:
size	jc_type.c	/^    size_t      size;     \/* length of array *\/$/;"	m	struct:jc_array_s	file:
size	jc_type.c	/^    size_t   size;     \/* size of str *\/$/;"	m	struct:jc_str_s	file:
size_t	jc_alloc.h	/^typedef unsigned long size_t;$/;"	t
type	jc_type.c	/^    jc_type_t         type;$/;"	m	struct:jc_val_s	file:
vals	jc_type.c	/^    jc_val_t   **vals;     \/* values of json *\/$/;"	m	struct:jc_json_s	file:
value	jc_type.c	/^    jc_val_t  **value;$/;"	m	struct:jc_array_s	file:
